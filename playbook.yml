---
- hosts: all

  vars:

    brew_packages:
      - keybase # in alpha at time of writing.
      - node
      - npm
      - wget
      - zsh
      - rcm

    brew_cask_packages:
          - google-chrome

    # brew_taps:
      # - caskroom/cask
      # - caskroom/versions # for sublime-text3
      # - homebrew/binary
      # - homebrew/dupes # gnu grep
      # - homebrew/versions 

    dotfile_repo_username: nille # the GH repo where your dotfiles are
    
    install_oh_my_zsh:  true
    
    zsh_path: /usr/local/bin/zsh

    home: "{{ lookup('env','HOME') }}"

  tasks:
    
    - name: Check Homebrew is installed
      stat: path=/usr/local/bin/brew
      register: brew_installed

    - name: Install Homebrew
      shell: ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
      when: brew_installed.stat.exists == false

    # - name: Instal required Homebrew Taps
    #   shell: brew tap {{ item }}
    #   with_items: brew_taps

    # - name: Check homebrew-cask is installed
    #   stat: path=/usr/local/bin/brew-cask.rb
    #   register: brew_cask_installed

    # - name: Install homebrew-cask
    #   shell: brew install brew-cask
    #   when: brew_cask_installed.stat.exists == false

    ### UTILS

    - name: Install libraries/utils with homebrew
      homebrew: name={{ item }} state=present
      with_items: brew_packages
    
    - name: Cleanup after brewing
      shell: brew cleanup


    ### APPZ

    - name: Check for installed apps(casks)
      shell: brew cask list | grep {{ item }}
      register: installed_brew_cask_packages
      with_items: brew_cask_packages
      ignore_errors: true
    
    - name: Install Apps with brew-cask
      shell: brew cask install {{ item }}
      with_items: brew_cask_packages
      when: "{{ item not in installed_brew_cask_packages.results|map(attribute='stdout') }}"

    # Caveats: megasync only works if called from /Applications
    # - name: Linking MEGASync with brew-cask
    #   shell: ln -s '/opt/homebrew-cask/Caskroom/megasync/latest/MEGAsync.app' '/Applications/MEGAsync.app'
    #   when: "'megasync' in applications"
    #   ignore_errors: true # hacky


    ### ZSH radness 

    - name: Determine if zsh is default/current shell
      shell: echo $SHELL
      register: current_shell

    - name: Enable zsh in /etc/shells
      shell: sudo /bin/sh -c 'grep -q "{{ zsh_path }}" /etc/shells || echo "{{ zsh_path }}" >> /etc/shells'
      when: current_shell.stdout != '/usr/local/bin/zsh'    
      #" unbreak my syntax highlighting...

    - name: Set zsh as default shell
      shell: chsh -s {{ zsh_path }}
      when: current_shell.stdout != '/usr/local/bin/zsh'
      sudo: true

    - name: Use GNU tools instead of osx counterparts (grep find etc) 
      shell: echo 'export PATH=$(brew --prefix coreutils)/libexec/gnubin:$PATH' >> ~/.zshrc


    - name: Install oh-my-zsh
      git: repo=https://github.com/robbyrussell/oh-my-zsh dest=~/.oh-my-zsh
      sudo: false
      when: install_oh_my_zsh == true
      tags: install_oh_my_zsh


    ### OSX SETTINGS

    - name: Configure System Settings
      script: scripts/system_settings.sh
      sudo: true



    ### DOTFILES

    - name: Check rcm is installed
      stat: path=/usr/local/bin/rcup
      register: rcm_installed

    - name: Install rcm for dotfiles management
      shell: brew tap thoughtbot/formulae && brew install rcm
      when: rcm_installed.stat.exists == false

    - name: Check ~/src dir exists
      stat: path=~/src/
      register: src_dir_exists

    - name: Assures ~/src dir exists
      file: path=~/src state=directory

    - name: Assures ~/src/thoughtbot dir exists
      file: path=~/src/thoughtbot state=directory

    - name: Install thoughtbot/dotfiles
      git: repo=https://github.com/thoughtbot/dotfiles.git dest=~/src/thoughtbot/dotfiles

    - name: Link ~/dotfiles to ~/src/thoughtbot/dotfiles
      file: dest=~/dotfiles 
            src=~/src/thoughtbot/dotfiles
            state=link
            force=yes
      
    - name: Assures ~/src/{{ dotfile_repo_username }} dir exists
      file: path=~/src/{{ dotfile_repo_username }} state=directory

    - name: Install {{ dotfile_repo_username }}/dotfiles
      git: repo=https://github.com/{{ dotfile_repo_username }}/dotfiles.git dest=~/src/{{ dotfile_repo_username }}/dotfiles

    - name: Link ~/dotfiles-local to ~/src/{{ dotfile_repo_username }}/dotfiles
      file: dest=~/dotfiles-local
            src=~/src/{{ dotfile_repo_username }}/dotfiles
            state=link
            force=yes

    - name: Generate dotfiles with rcup
      shell: env RCRC=~/dotfiles/rcrc rcup


    ## POST INSTALL STEPS / Cask gotchas
    #
    # require manual intervention!
    #
    
    # - name: Run Little Snitch Installer
    #   shell: open /opt/homebrew-cask/Caskroom/little-snitch/3.5.3/Little\ Snitch\ Installer.app
    #   when: "'little-snitch' in applications"

    # - name: Run Monolingual
    #   shell: open ~/Applications/Monolingual.app
    #   when: "'monolingual' in applications"
